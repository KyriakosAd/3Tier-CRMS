// <auto-generated />
using System;
using DAL.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Lecture", b =>
                {
                    b.Property<int>("Lecture_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Lecture_ID"));

                    b.Property<int>("Lecture_CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Lecture_CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lecture_Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lecture_Semester")
                        .HasColumnType("int");

                    b.Property<int>("Lecture_TotalHours")
                        .HasColumnType("int");

                    b.Property<string>("Lecture_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Lecture_ID");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("DAL.Entities.Reservation", b =>
                {
                    b.Property<int>("Reservation_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Reservation_ID"));

                    b.Property<int>("Reservation_Day")
                        .HasColumnType("int");

                    b.Property<DateTime>("Reservation_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reservation_EndTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("Reservation_EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Reservation_ExactDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Reservation_IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Reservation_StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reservation_StartTime")
                        .HasColumnType("int");

                    b.Property<int>("Room_ID")
                        .HasColumnType("int");

                    b.HasKey("Reservation_ID");

                    b.HasIndex("Room_ID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("DAL.Entities.Room", b =>
                {
                    b.Property<int>("Room_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Room_ID"));

                    b.Property<string>("Room_Building")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room_BuildingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Room_Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Room_ComputersCount")
                        .HasColumnType("int");

                    b.Property<bool>("Room_HasProjector")
                        .HasColumnType("bit");

                    b.Property<bool>("Room_IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Room_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Room_Type")
                        .HasColumnType("int");

                    b.HasKey("Room_ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DAL.Entities.RoomAvailability", b =>
                {
                    b.Property<int>("RoomAvailability_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomAvailability_ID"));

                    b.Property<int>("RoomAvailability_Day")
                        .HasColumnType("int");

                    b.Property<int>("RoomAvailability_EndTime")
                        .HasColumnType("int");

                    b.Property<int>("RoomAvailability_StartTime")
                        .HasColumnType("int");

                    b.Property<int>("Room_ID")
                        .HasColumnType("int");

                    b.HasKey("RoomAvailability_ID");

                    b.HasIndex("Room_ID");

                    b.ToTable("RoomAvailabilities");
                });

            modelBuilder.Entity("DAL.Entities.SubRequest", b =>
                {
                    b.Property<int>("SubRequest_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubRequest_ID"));

                    b.Property<int>("Reservation_ID")
                        .HasColumnType("int");

                    b.Property<int>("Room_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubRequest_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubRequest_EndTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubRequest_EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubRequest_OriginalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubRequest_StartTime")
                        .HasColumnType("int");

                    b.Property<int>("SubRequest_Status")
                        .HasColumnType("int");

                    b.HasKey("SubRequest_ID");

                    b.HasIndex("Reservation_ID");

                    b.HasIndex("Room_ID");

                    b.ToTable("SubRequests");
                });

            modelBuilder.Entity("DAL.Entities.Teacher", b =>
                {
                    b.Property<int>("Teacher_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Teacher_ID"));

                    b.Property<string>("Teacher_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teacher_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Teacher_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DAL.Entities.TeacherLecture", b =>
                {
                    b.Property<int>("Teacher_ID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Lecture_ID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Teacher_ID", "Lecture_ID");

                    b.HasIndex("Lecture_ID");

                    b.ToTable("TeacherLectures");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.Property<string>("User_Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Entities.Reservation", b =>
                {
                    b.HasOne("DAL.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("Room_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DAL.Entities.RoomAvailability", b =>
                {
                    b.HasOne("DAL.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("Room_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DAL.Entities.SubRequest", b =>
                {
                    b.HasOne("DAL.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("Reservation_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("Room_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DAL.Entities.Teacher", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("DAL.Entities.Teacher", "User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.TeacherLecture", b =>
                {
                    b.HasOne("DAL.Entities.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("Lecture_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("Teacher_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
